pipeline {
    agent any

    environment {
        VENV_DIR = "venv"
    }

    stages {
        stage('Clone Repository') {   
            steps {
                git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
            }
        }

        stage('Install System Dependencies') {
            steps {
                script {
                    sh '''
                        # Update system and install Python 3.11 and necessary libraries
                        sudo apt-get update -y
                        sudo apt-get install -y \
                            software-properties-common
                        sudo add-apt-repository ppa:deadsnakes/ppa -y
                        sudo apt-get update -y
                        sudo apt-get install -y python3.11 python3.11-venv python3.11-dev \
                            python3-pip libpq-dev gcc
                    '''
                }
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    sh '''
                        # Create virtual environment with Python 3.11 if not already created
                        if [ ! -d "$VENV_DIR" ]; then
                            python3.11 -m venv $VENV_DIR  # Specify the virtual environment directory
                        fi

                        # Activate virtual environment and upgrade pip
                        . ${VENV_DIR}/bin/activate
                        pip install --upgrade pip
                    '''
                }
            }
        }

        stage('Install Poetry') {
            steps {
                script {
                    sh '''
                        # Install Poetry in the virtual environment
                        . ${VENV_DIR}/bin/activate
                        pip install poetry
                    '''
                }
            }
        }

        stage('Update Poetry Lock File') {
            steps {
                script {
                    sh '''
                        # Update the poetry.lock file if pyproject.toml has changed
                        . ${VENV_DIR}/bin/activate
                        poetry lock --no-update
                    '''
                }
            }
        }

        stage('Install Python Dependencies') {
            steps {
                script {
                    sh '''
                        # Install dependencies based on the updated poetry.lock file
                        . ${VENV_DIR}/bin/activate
                        poetry install
                    '''
                }
            }
        }

        stage('Run Tests with Coverage') {
            steps {
                script {
                    sh '''
                        # Activate the virtual environment and run tests with coverage
                        . ${VENV_DIR}/bin/activate
                        coverage run -m pytest
                        coverage report > coverage.txt  
                        coverage html  
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                    # Remove the virtual environment after the build
                    rm -rf $VENV_DIR
                '''
                archiveArtifacts artifacts: 'unit-test-report.txt, coverage.txt, htmlcov/*', allowEmptyArchive: true
                echo 'Pipeline completed.'
            }
        }

        success {
            script {
                emailext(
                    attachmentsPattern: 'unit-test-report.txt, coverage.txt',
                    body: """${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
                    More info at: ${env.BUILD_URL}""",
                    to: 'anjalidhiman.as@gmail.com',
                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
                )
            }
        }

        failure {
            script {
                emailext(
                    to: 'anjalidhiman.as@gmail.com',
                    subject: 'Jenkins Pipeline Failure: Salary-api',
                    body: '''Hello,

The Jenkins pipeline has failed. Please check the logs.'''.stripIndent()
                )
            }
        }
    }
}

