node {
    def VENV_DIR = "venv"
    def reportFile = "${env.WORKSPACE}/unit-test.txt"  

    try {
        stage('Clone Repository') {
            git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
        }

        stage('Install System Dependencies') {
            sh '''
                sudo apt-get update -y
                sudo apt-get install -y python3.11 python3.11-venv python3-pip
            '''
        }

        stage('Set Up Python Environment') {
            sh """
                if [ ! -d "${VENV_DIR}" ]; then
                    python3.11 -m venv ${VENV_DIR}
                fi

                . ${VENV_DIR}/bin/activate
                pip install --upgrade pip
            """
        }

        stage('Install Poetry') {
            sh """
                . ${VENV_DIR}/bin/activate
                pip install poetry
            """
        }

        stage('Regenerate Poetry Lock File') {
            sh """
                . ${VENV_DIR}/bin/activate
                poetry lock --no-update
            """
        }

        stage('Install Project Dependencies') {
            sh """
                . ${VENV_DIR}/bin/activate
                poetry install
            """
        }

        stage('Run Tests') {
            sh """
                . ${VENV_DIR}/bin/activate
                poetry run pytest > unit-test.txt; cat unit-test.txt
            """
        }
    } catch (Exception e) {
        echo "Pipeline failed: ${e.message}"
        mail(
            to: 'anjalidhiman.as@gmail.com',
            subject: 'Pipeline Failed',
            body: 'The Jenkins pipeline failed. Please check the logs.'
        )
        throw e
    } finally {
        stage('Cleanup') {
            sh "rm -rf ${VENV_DIR}"
            archiveArtifacts artifacts: 'unit-test.txt, htmlcov/*', allowEmptyArchive: true
            echo 'Pipeline completed.'
        }

        stage('Send Email') {
            if (fileExists(reportFile)) {
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                    emailext(
                        to: 'anjalidhiman.as@gmail.com',
                        subject: "Jenkins Build SUCCESS: Job ${env.JOB_NAME}",
                        body: """SUCCESS: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
More info at: ${env.BUILD_URL}""",
                        attachmentsPattern: 'unit-test.txt',  
                        attachLog: true
                    )
                } else {
                    emailext(
                        to: 'anjalidhiman.as@gmail.com',
                        subject: "Jenkins Pipeline Failure: ${env.JOB_NAME}",
                        body: '''Hello,

The Jenkins pipeline has failed. Please check the logs.'''.stripIndent()
                    )
                }
            } else {
                echo "Error: Attachment file not found: ${reportFile}"
            }
        }
    }
}
