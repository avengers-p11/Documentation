node {
   
    env.VENV_DIR = "venv"

    stage('Clone Repository') {
        git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
    }

    stage('Install System Dependencies') {
        steps {
            sh '''
               
                DEBIAN_FRONTEND=noninteractive sudo apt-get update -y
                DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
                    software-properties-common
                sudo add-apt-repository ppa:deadsnakes/ppa -y
                sudo apt-get update -y
                sudo apt-get install -y python3.11 python3.11-venv python3.11-dev \
                    python3-pip libpq-dev gcc
            '''
        }
    }

    stage('Set Up Python Environment') {
        steps {
            sh '''
                
                if [ ! -d "$env.VENV_DIR" ]; then
                    python3.11 -m venv $env.VENV_DIR
                fi

                # Activate virtual environment and upgrade pip
                . ${env.VENV_DIR}/bin/activate
                pip install --upgrade pip
            '''
        }
    }

    stage('Install Poetry') {
        steps {
            sh '''
                
                . ${env.VENV_DIR}/bin/activate
                pip install poetry
            '''
        }
    }

    stage('Update Poetry Lock File') {
        steps {
            sh '''
                
                . ${env.VENV_DIR}/bin/activate
                poetry lock --no-update
            '''
        }
    }

    stage('Install Python Dependencies') {
        steps {
            sh '''
                . ${env.VENV_DIR}/bin/activate
                poetry install
            '''
        }
    }

    stage('Run Tests') {
        steps {
            sh '''
                . ${env.VENV_DIR}/bin/activate
                poetry run pytest
            '''
        }
    }

    post {
        always {
            sh '''
                rm -rf $env.VENV_DIR
            '''
            archiveArtifacts artifacts: 'unit-test-report.txt', allowEmptyArchive: true
        }

        success {
            emailext(
                attachmentsPattern: 'unit-test-report.txt',
                body: """${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
                          More info at: ${env.BUILD_URL}""",
                to: 'anjalidhiman.as@gmail.com', 
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
            )
        }

        failure {
            emailext(
                to: 'anjalidhiman.as@gmail.com',
                subject: 'Jenkins Pipeline Failure: Salary-api',
                body: '''Hello,

                The Jenkins pipeline has failed. Please check the logs.'''.stripIndent()
            )
        }
    }
}
