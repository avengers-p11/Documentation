node {
    def VENV_DIR = "venv"
    def DEP_CHECK_PATH = "/opt/dependency-check/bin"
    def reportFile = "${env.WORKSPACE}/dependency-check-report.html"

    try {
        stage('Clone Repository') {
            echo 'Cloning the repository...'
            git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
        }

        stage('Install System Dependencies') {
            echo 'Installing required system dependencies...'
            sh '''
                sudo apt-get update -y
                sudo apt-get install -y python3.11 python3.11-venv python3-pip unzip curl
            '''
        }

        stage('Set Up Python Environment') {
            echo 'Setting up the Python virtual environment...'
            sh """
                if [ ! -d "${VENV_DIR}" ]; then
                    python3.11 -m venv ${VENV_DIR}
                fi
                . ${VENV_DIR}/bin/activate
                pip install --upgrade pip
            """
        }

        stage('Install OWASP Dependency-Check') {
            echo 'Installing OWASP Dependency-Check...'
            script {
                sh '''
                    # Ensure /opt directory is writable
                    if [ ! -w /opt ]; then
                        echo 'Adding write permissions to /opt directory...'
                        sudo chmod +w /opt
                    fi

                    # Download Dependency-Check if it's not already installed
                    if [ ! -d /opt/dependency-check ]; then
                        echo "Downloading OWASP Dependency-Check..."
                        curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.3/dependency-check-7.0.3-release.zip -o dependency-check.zip
                        sudo unzip dependency-check.zip -d /opt/
                        sudo mv /opt/dependency-check-7.0.3 /opt/dependency-check
                    else
                        echo "OWASP Dependency-Check is already installed."
                    fi

                    # Ensure the Jenkins user has write permissions to /opt/dependency-check
                    sudo chown -R ${USER} /opt/dependency-check
                    sudo chmod -R u+w /opt/dependency-check
                '''
            }
        }

        stage('Update OWASP Dependency-Check Database') {
            echo 'Updating OWASP Dependency-Check database...'
            sh '''
                # Update the dependency-check database using the correct path
                /opt/dependency-check/bin/dependency-check.sh --updateonly
            '''
        }

        stage('Run OWASP Dependency-Check') {
            echo 'Running OWASP Dependency-Check for dependency scanning...'
            sh '''
                # Run dependency-check using the full path
                /opt/dependency-check/bin/dependency-check.sh --project Attendance-API --scan . --format HTML --out dependency-check-report.html
            '''
        }

    } catch (Exception e) {
        echo "Pipeline failed: ${e.message}"
        mail(
            to: 'anjalidhiman.as@gmail.com',
            subject: 'Pipeline Failed',
            body: 'The Jenkins pipeline failed. Please check the logs.'
        )
        throw e
    } finally {
        stage('Cleanup') {
            echo 'Cleaning up...'
            sh "rm -rf ${VENV_DIR}"
            archiveArtifacts artifacts: 'dependency-check-report.html', allowEmptyArchive: true
            echo 'Pipeline completed.'
        }

        stage('Send Email') {
            if (fileExists(reportFile)) {
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                    emailext(
                        to: 'anjalidhiman.as@gmail.com',
                        subject: "Jenkins Build SUCCESS: Job ${env.JOB_NAME}",
                        body: """SUCCESS: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
More info at: ${env.BUILD_URL}""",
                        attachmentsPattern: 'dependency-check-report.html',  // Attach the correct report file
                        attachLog: true
                    )
                } else {
                    emailext(
                        to: 'anjalidhiman.as@gmail.com',
                        subject: "Jenkins Pipeline Failure: ${env.JOB_NAME}",
                        body: '''Hello,

The Jenkins pipeline has failed. Please check the logs.'''.stripIndent()
                    )
                }
            } else {
                echo "Error: Attachment file not found: ${reportFile}"
            }
        }
    }
}
