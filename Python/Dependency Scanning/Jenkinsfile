pipeline {
    agent any

    environment {
        VENV_DIR = "venv" 
        DEP_CHECK_PATH = "/opt/dependency-check/bin" 

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository...'
                git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing required dependencies...'
                sh '''
                    # Install python3-venv and pip3
                    echo "Installing python3-venv and pip3..."
                    sudo apt-get update
                    sudo apt-get install -y python3-venv python3-pip unzip curl
                '''
            }
        }

        stage('Setup Python Virtual Environment') {
            steps {
                echo 'Setting up the Python virtual environment...'
                sh '''
                    # Create a virtual environment if it doesn't exist
                    if [ ! -d "$VENV_DIR" ]; then
                        python3 -m venv $VENV_DIR
                    fi

                    # Install required Python packages
                    ${VENV_DIR}/bin/pip install --upgrade pip
                    ${VENV_DIR}/bin/pip install -r requirements.txt || echo "requirements.txt not found, skipping dependency installation."
                    
                    # Ensure pytest is installed
                    ${VENV_DIR}/bin/pip install pytest
                '''
            }
        }

        stage('Install OWASP Dependency-Check') {
            steps {
                echo 'Installing OWASP Dependency-Check...'
                script {
                    sh '''
                        # Ensure /opt directory is writable
                        if [ ! -w /opt ]; then
                            echo 'Adding write permissions to /opt directory...'
                            sudo chmod +w /opt
                        fi

                        # Download Dependency-Check if it's not already installed
                        if [ ! -d /opt/dependency-check ]; then
                            echo "Downloading OWASP Dependency-Check..."
                            curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.3/dependency-check-7.0.3-release.zip -o dependency-check.zip
                            sudo unzip dependency-check.zip -d /opt/
                            sudo mv /opt/dependency-check-7.0.3 /opt/dependency-check
                        else
                            echo "OWASP Dependency-Check is already installed."
                        fi

                        # Ensure the Jenkins user has write permissions to /opt/dependency-check
                        sudo chown -R ${USER} /opt/dependency-check
                        sudo chmod -R u+w /opt/dependency-check
                    '''
                }
            }
        }

        stage('Update OWASP Dependency-Check Database') {
            steps {
                echo 'Updating OWASP Dependency-Check database...'
                sh '''
                    # Update the dependency-check database
                    ${DEP_CHECK_PATH}/dependency-check.sh --updateonly
                '''
            }
        }

        stage('Run OWASP Dependency-Check') {
            steps {
                echo 'Running OWASP Dependency-Check for dependency scanning...'
                sh '''
                    # Run dependency-check using the full path
                    ${DEP_CHECK_PATH}/dependency-check.sh --project Attendance-API --scan . --format HTML --out dependency-check-report.html
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
            // Archive the dependency check report file
            archiveArtifacts artifacts: 'dependency-check-report.html', allowEmptyArchive: true
        }
        success {
            emailext(
                attachmentsPattern: 'dependency-check-report.html',
                mimeType: 'text/html',
                body: """<html>
                            <body>
                                <h2>Jenkins Build ${currentBuild.currentResult}</h2>
                                <p>Job: ${env.JOB_NAME}</p>
                                <p>Build Number: ${env.BUILD_NUMBER}</p>
                                <p>Status: ${currentBuild.currentResult}</p>
                                <p>More details at: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            </body>
                         </html>""",
                recipientProviders: [developers(), requestor()],
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                to: 'anjalidhiman.as@gmail.com'
            )
        }
        failure {
            echo 'Pipeline failed.'
            emailext(
                mimeType: 'text/html',
                to: 'anjalidhiman.as@gmail.com',
                subject: 'Jenkins Pipeline Failure: Attendance-api',
                body: """<html>
                            <body>
                                <h2>Pipeline Failure</h2>
                                <p>Hello,</p>
                                <p>The Jenkins pipeline has failed. Please check the logs for details.</p>
                            </body>
                         </html>""",
                attachmentsPattern: 'dependency-check-report.html'
            )
        }
    }
}
