node {
    def scannerHome = tool 'Sonar'
    def VENV_DIR = "venv"

    try {
        stage('Clone Repository') {
            git branch: 'main', url: 'git@github.com:avengers-p11/attendance-api.git'
        }

        stage('Install Dependencies') {
            sh '''
                #!/bin/bash
                sudo apt-get update
                sudo apt-get install -y python3 python3-venv python3-pip
            '''
        }

        stage('Setup Python Virtual Environment') {
            sh '''
                #!/bin/bash
                if [ ! -d "$VENV_DIR" ]; then
                    python3 -m venv "$VENV_DIR"
                fi
                
                # Ensure pip is installed and updated
                curl https://bootstrap.pypa.io/get-pip.py | "$VENV_DIR/bin/python"
                "$VENV_DIR/bin/pip" install --upgrade pip

                # Check if pyproject.toml exists and install dependencies
                if [ -f "pyproject.toml" ]; then
                    if grep -q 'poetry' pyproject.toml; then
                        "$VENV_DIR/bin/pip" install poetry
                        "$VENV_DIR/bin/poetry" install
                    else
                        echo "pyproject.toml does not specify Poetry; attempting direct pip install."
                        "$VENV_DIR/bin/pip" install -r <(poetry export -f requirements.txt --without-hashes)
                    fi
                else
                    echo "No pyproject.toml file found. Skipping dependency installation."
                fi
                
                # Install pytest
                "$VENV_DIR/bin/pip" install pytest
            '''
        }

        stage('Bug Analysis') {
            withSonarQubeEnv('Sonar') {
                sh '''
                    #!/bin/bash
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=attendance \
                        -Dsonar.projectName=Attendance-api \
                        -Dsonar.login=squ_4f371ade2db48dafec85157cda9d3d07e6a5c456 \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.issue.types=BUG \
                        -Dsonar.report.export.path=bugs-report.txt
                '''
            }
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        emailext(
            to: 'anjalidhiman.as@gmail.com',
            subject: 'Jenkins Pipeline Failure: Attendance-api',
            body: """
                <html>
                    <body>
                        <h2>Pipeline Failure</h2>
                        <p>Hello,</p>
                        <p>The Jenkins pipeline has failed. Please check the logs for details.</p>
                    </body>
                </html>
            """,
            mimeType: 'text/html'
        )
        throw e
    } finally {
        stage('Post Actions') {
            echo 'Archiving artifacts...'
            sh 'touch compilation-report.txt || true'
            archiveArtifacts artifacts: '**/compilation-report.txt', allowEmptyArchive: true
            if (currentBuild.result == 'SUCCESS') {
                emailext(
                    attachmentsPattern: '**/compilation-report.txt',
                    to: 'anjalidhiman.as@gmail.com',
                    subject: "Jenkins Build SUCCESS: Attendance-api",
                    body: """
                        <html>
                            <body>
                                <h2>Build SUCCESS</h2>
                                <p>Job: ${env.JOB_NAME}</p>
                              
